plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.81'
    id 'java-library'
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":api")
    compileOnly project(":common")
    compileOnly project(":common-rei")

    // EMI
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    compileOnly "dev.emi:emi-neoforge:${emi_version}"
//    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

    // JEI
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    // REI
    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}"
//    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    implementation "dev.architectury:architectury-neoforge:${architectury_version}"

    // LootJS
//    implementation "curse.maven:kubejs-238086:5853326"
//    implementation "curse.maven:rhino-416294:6186971"
//    implementation "curse.maven:lootjs-570630:5404565"

    // Aether https://www.curseforge.com/minecraft/mc-mods/aether
//    compileOnly "curse.maven:aether-255308:5889512"

    // Deeper and Darker https://www.curseforge.com/minecraft/mc-mods/deeperdarker
//    compileOnly "curse.maven:deeperdarker-659011:5906086"

    // Farmer's Delight https://www.curseforge.com/minecraft/mc-mods/farmers-delight
//    compileOnly "curse.maven:farmers-delight-398521:6917255"

    // Hybrid Aquatic https://www.curseforge.com/minecraft/mc-mods/hybrid-aquatic
//    compileOnly "curse.maven:hybrid-aquatic-834427:6497304"

    // Immersive Engineering https://www.curseforge.com/minecraft/mc-mods/immersive-engineering
//    compileOnly fg.deobf("curse.maven:immersive-engineering-231951:6206989")

    // Moonlight https://www.curseforge.com/minecraft/mc-mods/selene
//    compileOnly "curse.maven:selene-499980:6983934"

    // Repurposed Structures https://www.curseforge.com/minecraft/mc-mods/repurposed-structures
//    compileOnly "curse.maven:repurposed-structures-368293:6797349"

    // Sawmill https://www.curseforge.com/minecraft/mc-mods/sawmill
//    compileOnly "curse.maven:sawmill-964817:6948522"

    // Snow! Real Magic! https://www.curseforge.com/minecraft/mc-mods/snow-real-magic
//    compileOnly "curse.maven:snow-real-magic-308663:6888541"

    // Supplementaries https://www.curseforge.com/minecraft/mc-mods/supplementaries
//    compileOnly "curse.maven:supplementaries-412082:6974860"

    // The Bumblezone https://www.curseforge.com/minecraft/mc-mods/the-bumblezone-forge
//    compileOnly "curse.maven:the-bumblezone-forge-362479:6960926"

    // Villagers plus https://www.curseforge.com/minecraft/mc-mods/villagersplus-forge
//    compileOnly "curse.maven:villagersplus-forge-817272:4996995"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.named('compileTestJava') {
    it.enabled = false
}

tasks.named('test') {
    it.enabled = false
}

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":api").sourceSets.main.allSource)
    source(project(":common").sourceSets.main.allSource)
    source(project(":common-emi").sourceSets.main.allSource)
    source(project(":common-jei").sourceSets.main.allSource)
    source(project(":common-rei").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":api").sourceSets.main.allSource)
    from(project(":common").sourceSets.main.allSource)
    from(project(":common-emi").sourceSets.main.allSource)
    from(project(":common-jei").sourceSets.main.allSource)
    from(project(":common-rei").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":api").sourceSets.main.resources
    from project(":common").sourceSets.main.resources
    from project(":common-emi").sourceSets.main.resources
    from project(":common-jei").sourceSets.main.resources
}