plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
//    config("${mod_id}.lootjs.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":api").sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":api").sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":api").sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    compileOnly project(":api")
    compileOnly project(":common")
    compileOnly project(":common-rei")
//    compileOnly project(":common-lootjs")

    // EMI
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}")
//    runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // REI
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    // LootJS
//    implementation fg.deobf("curse.maven:kubejs-238086:5853326")
//    implementation fg.deobf("curse.maven:rhino-416294:6186971")
//    implementation fg.deobf("curse.maven:lootjs-570630:5404565")

//    implementation fg.deobf("curse.maven:botania-225643:6366547")
//    implementation fg.deobf("curse.maven:curios-309927:6418456")
//    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
}

tasks.named('compileTestJava') {
    it.enabled = false
}

tasks.named('test') {
    it.enabled = false
}

tasks.withType(JavaCompile).configureEach {
    source(project(":api").sourceSets.main.allSource)
    source(project(":common").sourceSets.main.allSource)
    source(project(":common-emi").sourceSets.main.allSource)
    source(project(":common-jei").sourceSets.main.allSource)
    source(project(":common-rei").sourceSets.main.allSource)
//    source(project(":common-lootjs").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":api").sourceSets.main.allSource)
    from(project(":common").sourceSets.main.allSource)
    from(project(":common-emi").sourceSets.main.allSource)
    from(project(":common-jei").sourceSets.main.allSource)
    from(project(":common-rei").sourceSets.main.allSource)
//    from(project(":common-lootjs").sourceSets.main.allSource)
}

tasks.named('compileTestJava') {
    it.enabled = false
}

tasks.named('test') {
    it.enabled = false
}

processResources {
    from project(":api").sourceSets.main.resources
    from project(":common").sourceSets.main.resources
    from project(":common-emi").sourceSets.main.resources
    from project(":common-jei").sourceSets.main.resources
//    from project(":common-lootjs").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')
