plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
//    config("${mod_id}.lootjs.mixins.json")
    config("${mod_id}.forge.mixins.json")
    config("${mod_id}.aether.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    compileOnly project(":api")
    compileOnly project(":common")
    compileOnly project(":common-rei")
//    compileOnly project(":common-lootjs")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // REI
//    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
//    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
//    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
//    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    // LootJS
//    implementation fg.deobf("curse.maven:kubejs-238086:5853326")
//    implementation fg.deobf("curse.maven:rhino-416294:6186971")
//    implementation fg.deobf("curse.maven:lootjs-570630:5404565")

    // Aether
//    implementation fg.deobf("curse.maven:aether-255308:6134920")

    // Farmer's Delight
//    implementation fg.deobf("curse.maven:farmers-delight-398521:6917255")

    // Testing
//    implementation fg.deobf("curse.maven:botania-225643:6366547")
//    implementation fg.deobf("curse.maven:curios-309927:6418456")
//    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
//    implementation fg.deobf("curse.maven:alexs-caves-924854:5848216")
//    implementation fg.deobf("curse.maven:citadel-331936:6702068")
//    implementation fg.deobf("curse.maven:alexs-mobs-426558:5698791")
}

tasks.named('compileTestJava') {
    it.enabled = false
}

tasks.named('test') {
    it.enabled = false
}

tasks.withType(JavaCompile).configureEach {
    source(project(":api").sourceSets.main.allSource)
    source(project(":common").sourceSets.main.allSource)
    source(project(":common-jei").sourceSets.main.allSource)
//    source(project(":common-rei").sourceSets.main.allSource)
//    source(project(":common-lootjs").sourceSets.main.allSource)
//    source(project(":compatibility-aether").sourceSets.main.allSource)
//    source(project(":compatibility-farmers-delight").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":api").sourceSets.main.allSource)
    from(project(":common").sourceSets.main.allSource)
    from(project(":common-jei").sourceSets.main.allSource)
//    from(project(":common-rei").sourceSets.main.allSource)
//    from(project(":common-lootjs").sourceSets.main.allSource)
//    from(project(":compatibility-aether").sourceSets.main.allSource)
//    from(project(":compatibility-farmers-delight").sourceSets.main.allSource)
}

tasks.named('compileTestJava') {
    it.enabled = false
}

tasks.named('test') {
    it.enabled = false
}

processResources {
    from project(":api").sourceSets.main.resources
    from project(":common").sourceSets.main.resources
    from project(":common-jei").sourceSets.main.resources
//    from project(":common-lootjs").sourceSets.main.resources
//    from project(":compatibility-aether").sourceSets.main.resources
//    from project(":compatibility-farmers-delight").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}